<div class="homebody d-flex">
	<div class="container content">
		<div class="row justify-content-center">
			<div class="body-header">
				<p>全 <strong><%= @lives.count %></strong> 件取得</p>	
			</div>
			<div class="report-container col-lg-3">
				<% @lives.each do |live| %>
					<div class="live-item live-box" data-lat="<%= live.latitude %>" data-lng="<%= live.longitude %>">
						<p class="artist_name"><%= link_to live.artist.user.username, user_path(live.artist.user), class: "a_name" %></p>
						<p class="schedule"><%= live.scheduled_at %></p>
						<p class="location"></p>
					</div>
				<% end %>
				<div class="paginate">
					<%= paginate @lives %>
				</div>
			</div>
			<div class="gmap-container col-lg-9">
				<div id='map' class="gmap"></div>
			</div>
		</div>
	</div>
</div>


<script>

	let map, currentLocationMarker;
	let markers = [];

	// 現在地を取得して地図を初期化する関数
	function init_homeMap() {
		if (navigator.geolocation) {
			navigator.geolocation.getCurrentPosition(handleGeolocationSuccess, handleGeolocationError);
		} else {
			alert('このブラウザでは現在地の取得がサポートされていません。');
		}
	}

	// Geolocation API成功時の処理を行う関数
	function handleGeolocationSuccess(position) {
		const currentLocation = {
			lat: position.coords.latitude,
			lng: position.coords.longitude
		};

		initializeMap(currentLocation);
		addCurrentLocationMarker(currentLocation);
		addMarkersFromDatabase();
		setupSearchForm();
		setupLiveItemClick();
	}

	// 現在地の地図を初期化する関数
	function initializeMap(location) {
		map = new google.maps.Map(document.getElementById('map'), {
			center: location,
			zoom: 15,
		});
	}

	// 現在地にマーカーを追加する関数
	function addCurrentLocationMarker(location) {
		currentLocationMarker = new google.maps.Marker({
			position: location,
			map: map,
			icon: {
				path: google.maps.SymbolPath.CIRCLE,
				scale: 8,
				fillColor: '#4285F4',
				fillOpacity: 1,
				strokeColor: '#ffffff',
				strokeWeight: 2
			},
			title: "現在地"
		});
	}

	// データベースから取得した場所にマーカーを追加する関数
	function addMarkersFromDatabase() {
		<% @lives.each do |live| %>
			addMarker({
				lat: <%= live.latitude %>,
				lng: <%= live.longitude %> ,
				title: "<%= live.artist.user.username %>",
				description: "<%= live.description %>",
				dataLat: <%= live.latitude %> ,
				dataLng: <%= live.longitude %>
			}); 
		<% end %>
	}

	// 各ライブ場所にマーカーを追加する関数
	function addMarker(liveLocation) {
		const marker = new google.maps.Marker({
			position: liveLocation,
			map: map,
			title: liveLocation.title
		});

		markers.push(marker);

		const infoWindow = new google.maps.InfoWindow({
			content: `<div><p>${liveLocation.title}</p><p>${liveLocation.description}</div>`
		});

		marker.addListener('click', () => {
			infoWindow.open(map, marker);
		});

		const geocoder = new google.maps.Geocoder();
		geocoder.geocode({
			location: liveLocation
		}, (results, status) => {
			if (status === "OK" && results[0]) {
				const address = results[0].formatted_address;
				const addressElement = document.querySelector(`[data-lat='${liveLocation.dataLat}'][data-lng='${liveLocation.dataLng}'] .location`);
				addressElement.textContent = address;
			} else {
				console.error("Geocoder failed due to: " + status);
			}
		});
	}

	// 検索フォームの設定を行う関数
	function setupSearchForm() {
		document.getElementById('location-search-form').addEventListener('submit', function (event) {
			event.preventDefault();
			handleLocationSearch();
		});
	}

	// 検索処理を行う関数
	function handleLocationSearch() {
		const query = document.getElementById('location-input').value.trim().toLowerCase();
		const geocoder = new google.maps.Geocoder();

		geocoder.geocode({
			'address': query
		}, function (results, status) {
			if (status === 'OK') {
				const newCenter = results[0].geometry.location;
				map.setCenter(newCenter);
				map.setZoom(15);

				const marker = new google.maps.Marker({
					position: newCenter,
					map: map,
					title: query
				});
			} else {
				handleArtistSearch(query);
			}
		});
	}

	// アーティスト検索の処理を行う関数
	function handleArtistSearch(query) {
		const foundMarker = markers.find(marker =>
			marker.getTitle().toLowerCase().includes(query)
		);

		if (foundMarker) {
			map.setCenter(foundMarker.getPosition());
			map.setZoom(18);
			foundMarker.setAnimation(google.maps.Animation.BOUNCE);

			setTimeout(() => foundMarker.setAnimation(null), 2000);
		} else {
			alert('地名やアーティストが見つかりませんでした。');
		}
	}

	// ライブアイテムのクリックイベントを設定する関数
	function setupLiveItemClick() {
		document.querySelectorAll('.live-item').forEach(item => {
			item.addEventListener('click', function () {
				const lat = parseFloat(this.dataset.lat);
				const lng = parseFloat(this.dataset.lng);

				const clickedMarker = markers.find(marker =>
					marker.getPosition().lat() === lat && marker.getPosition().lng() === lng
				);

				if (clickedMarker) {
					map.setCenter(clickedMarker.getPosition());
					map.setZoom(18);
					clickedMarker.setAnimation(google.maps.Animation.BOUNCE);

					setTimeout(() => clickedMarker.setAnimation(null), 2000);
				}
			});
		});
	}

	// Geolocation API失敗時の処理を行う関数
	function handleGeolocationError() {
		alert('現在地を取得できませんでした。');
	}

</script>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCY4V6hGZLX1sdrneCUr3280n5pLvxkBtk&callback=init_homeMap" asyncdefer></script>